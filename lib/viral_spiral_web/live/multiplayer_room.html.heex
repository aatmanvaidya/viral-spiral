<div 
    id="multiplayer-room-container" 
    phx-hook={"HookMultiplayerRoom"}
    class="h-full relative"
    >
        <div class="absolute w-full h-full">
            <Atoms.background id={"container-bg"} image={bg_image(get_in(@state.room.chaos))} />
        </div>
    
    
        <div class="absolute w-full h-full">
            <div :if={@state && @state.others} id="container-others" 
                class="h-fit flex flex-row flex-wrap gap-2">
                <div :for={other <- @state.others}>
                    <div class="flex flex-row h-fit w-fit p-2 gap-2 border border-px-2 rounded-md bg-slate-50">
                        <div class="h-12 w-12 bg-red-200">
                            
                        </div>
                        <div>
                            <div class="flex flex-row flex-wrap gap-4">
                                <p> <%= other.name %> </p>
                                <p> <%= other.clout %> </p>
                            </div>
                            <div class="flex flex-row gap-4">
                                <div :for={{bias, value} <- other.biases}> 
                                    <span> <%= Bias.label(bias)  %> </span>
                                    <span> <%= value %> </span>
                                </div>
                            </div>
                            <div class="flex flex-row gap-4">
                                <div :for={{affinity, value} <- other.affinities}> 
                                    <span> <%= Affinity.label(affinity)  %> </span>
                                    <span> <%= value %> </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
            </div>

            <div :if={@state && @state.current_cards} id="container-cards" class="h-3/5 mt-2">
                <div :for={card <- @state.current_cards}>
                    <.card card={card} from={@state.me.id} />
                </div>
            </div>

            <div class="container-powers mb-2">
                <div :if={@state && @state.power_cancel.can_cancel} phx-click={show_modal("cancel-initiate-modal")}>
                    <button class="py-1 px-2 bg-violet-950 hover:bg-violet-300 text-slate-50 hover:text-slate-800 text-xs rounded-md border border-zinc-900" >Cancel Player</button>
                    <.modal id={"cancel-initiate-modal"} class="justify-center">
                        <div>

                        <.simple_form for={@state.power_cancel.form.data} phx-submit="initiate_cancel">
                            <.input type="select" 
                            field={@state.power_cancel.form.data[:target_id]} 
                            label="Player" 
                            options={@state.power_cancel.form.values.targets.options} 
                            value={@state.power_cancel.form.values.targets.value}  
                            />
                            
                            <.input type="select" field={@state.power_cancel.form.data[:affinity]} 
                            options={@state.power_cancel.form.values.affinity.options} 
                            value={@state.power_cancel.form.values.affinity.value} 
                            label="Affinities"
                            />

                            <.input type="hidden" name="from_id" value={@state.me.id}/>
                            <:actions>
                            <.button>Save</.button>
                            </:actions>
                        </.simple_form>
                            
                        </div>
                    </.modal>
                </div>

                <div :if={@state && @state.power_cancel.can_vote}>
                    <.modal id={"cancel-vote-modal"} show={true}>
                        <button
                            phx-click={JS.push("cancel_vote", value: %{vote: true, from_id: @state.me.id})}
                            class=" py-1 px-2 bg-[#015058] hover:bg-[#21802B] text-white rounded"
                        >
                            Yes
                        </button>

                        <button
                            phx-click={JS.push("cancel_vote", value: %{vote: true, from_id: @state.me.id})}
                            class=" py-1 px-2 bg-[#015058] hover:bg-[#21802B] text-white rounded"
                        >
                            No
                        </button>
                        
                    </.modal>
                </div>
                
            </div>

            <div class="flex flex-row gap-2 flex-wrap"> 

                <div :if={@state && @state.me} id="container-me" class="h-fit bg-zinc-200">
                    <div class="flex flex-row h-fit w-fit p-2 gap-2 border border-px-2 rounded-md">
                        <div class="h-12 w-12 bg-slate-50">
                            
                        </div>
                        <div>
                            <div class="flex flex-row flex-wrap gap-4">
                                <p> <%= @state.me.name %> </p>
                                <p> <%= @state.me.clout %> </p>
                            </div>
                            <div class="flex flex-row gap-4">
                                <div :for={{bias, value} <- @state.me.biases}> 
                                    <span> <%= Bias.label(bias)  %> </span>
                                    <span> <%= value %> </span>
                                </div>
                            </div>
                            <div class="flex flex-row gap-4">
                                <div :for={{affinity, value} <- @state.me.affinities}> 
                                    <span> <%= Affinity.label(affinity)  %> </span>
                                    <span> <%= value %> </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div :if={@state && @state.hand} id="container-hand" class="h-fit border border-px-2 rounded-md p-2">
                    <div class="flex flex-row gap-1">
                    <div class=" overflow-scroll p-1 w-8 h-auto"
                        :for={card<- @state.hand}
                    >
                        <button phx-click={show_modal("hand-card-modal-#{card.id}")}>
                            <.hand_card card={card}  />
                        </button>
                        <.modal id={"hand-card-modal-#{card.id}"} class="justify-center">
                            <div :if={card != nil} >
                                <.card_preview card={card} />
                            </div>
                        </.modal>
                    </div>
                    </div>
                </div>
            </div>
        </div>
    
</div>